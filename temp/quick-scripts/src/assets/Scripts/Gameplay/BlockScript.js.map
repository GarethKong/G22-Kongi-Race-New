{"version":3,"sources":["assets/Scripts/Gameplay/BlockScript.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport CustomEventManager from \"../Ultilities/CustomEventManager\";\nimport SimplePool from \"../Ultilities/SimplePool\";\nimport SoundManager from \"../Ultilities/SoundManager\";\nimport GameManager from \"./GameManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class BlockScript extends cc.Component\n{\n    private BlockWidth: number = 0;\n    @property\n    private BlockHeight: number = 0;\n    @property(cc.Node)\n    private mistBefore: cc.Node = null;\n    @property(cc.Node)\n    private CenterNode: cc.Node = null;\n\n    private YOffset: number = 0;\n\n    private IsActiveForCollision: boolean = false;\n\n\n\n    protected update(dt: number): void\n    {\n        this.node.position = this.node.position.addSelf(this.Velocity.mul(dt));\n\n        if (this.node.position.y < -1500) SimplePool.instance.Despawn(this.node);\n        if (this.IsActiveForCollision == false) return;\n\n        if (this.SqrDistanceFromTargetToHorizontalLine(GameManager.Instance.KongiNode.node) <= Math.pow(GameManager.Instance.KongiRadius + this.BlockHeight * 0.5, 2))\n        {\n            if (this.SqrDistanceFromTargetToVerticalLine(GameManager.Instance.KongiNode.node) <= Math.pow(GameManager.Instance.KongiRadius + this.BlockWidth * 0.5 + 30, 2))\n            {\n                GameManager.Instance.SetNextBlock();\n                GameManager.Instance.PushUpKongi(this.node.angle);\n                this.MoveDownWhenHitPlayer();\n                SoundManager.Instance.PlayHitSound();\n            }\n            else\n            {\n                this.scheduleOnce(() => {GameManager.Instance.ShowGameOver();}, 0.5);\n                SoundManager.Instance.PlayGameOverSound();\n\n                // let distanceHorizontal = this.SqrDistanceFromTargetToHorizontalLine(GameManager.Instance.KongiNode.node);\n                // let distanceVertical = this.SqrDistanceFromTargetToVerticalLine(GameManager.Instance.KongiNode.node);\n                // this.node.color = cc.Color.GREEN;\n                // console.log(this.node.position);\n                // console.log(\"horizontal: \" + distanceHorizontal);\n                // console.log(\"vertical: \" + distanceVertical);\n                // console.log(\"Width: \" + this.BlockWidth);\n                // console.log(\"Kongi Radius: \" + GameManager.Instance.KongiRadius);\n                // console.log(GameManager.Instance.KongiNode.node.position);\n                // cc.game.pause();\n            }\n            this.IsActiveForCollision = false;\n        }\n    }\n\n    public EnableForCollision(isDelayForEnable: boolean)\n    {\n        if (isDelayForEnable)\n        {\n            this.scheduleOnce(() => {this.IsActiveForCollision = true;}, 0.3);\n        }\n        else\n        {\n            this.IsActiveForCollision = true;\n        }\n\n    }\n\n    private ColorIndex: number = 0;\n    public ChangeStateToNextIndex(changeDuration: number): void\n    {\n        // chuyển màu về gần với màu gốc\n        if (this.ColorIndex > 0)\n        {\n            this.ColorIndex--;\n            cc.tween(this.node).to(changeDuration, {\n                color: GameManager.Instance.ColorList[this.ColorIndex]\n                , scale: GameManager.Instance.ScaleList[this.ColorIndex]\n            }).start();\n            cc.tween(this.node).by(changeDuration, {position: cc.v3(0, this.YOffset, 0)}).start();\n        }\n    }\n\n    //#region INIT BLOCK\n    public SetBlockInfo(blockWidth: number, startAngle: number, moveType: BlockMoveType, position: cc.Vec3, colorIndex: number, yOffset: number): void\n    {\n        console.log(colorIndex);\n        this.node.position = position;\n        this.BlockWidth = blockWidth;\n        this.node.width = blockWidth;\n        this.node.angle = startAngle;\n        this.mistBefore.width = blockWidth;\n        this.YOffset = yOffset;\n\n        this.ColorIndex = colorIndex;\n        this.node.color = GameManager.Instance.ColorList[this.ColorIndex];\n        this.node.scale = GameManager.Instance.ScaleList[this.ColorIndex];\n\n        this.Velocity = cc.Vec3.ZERO; // tùy move type\n        this.IsActiveForCollision = false;\n\n    }\n    //#endregion INIT BLOCK\n\n    //#region MOVE BLOCK\n    private Velocity: cc.Vec3 = cc.Vec3.ZERO;\n    private MoveDownWhenHitPlayer(): void\n    {\n        this.Velocity = cc.v3(0, -1000);\n    }\n\n    public OnGameOver(): void\n    {\n        let angleInRadian = this.node.angle * Math.PI / 180;\n        this.Velocity = cc.v3(4000 * Math.sin(angleInRadian), -4000 * Math.cos(angleInRadian));\n    }\n    //#endregion  MOVE BLOCK\n\n    //#region CHECK COLLSION\n    /**\n     * khoảng cách từ node (target) tới đường thẳng ax + by + c = 0\n     */\n    private SqrDistanceFromTargetToLine(a: number, b: number, c: number, target: cc.Node): number\n    {\n        // ax + by + c = 0\n        // point: (x0,yo)\n        // distance: abs(ax0 + by0 + c) / sqrt(a*a + b*b)\n        return Math.pow(a * target.x + b * target.y + c, 2) / (a * a + b * b);\n    }\n\n    /**\n     * Bình phương khoảng cách từ target đến trục dọc block\n     */\n    private SqrDistanceFromTargetToVerticalLine(target: cc.Node): number\n    {\n        if (this.node.angle === 0 || this.node.angle === 180)\n        {\n            return this.SqrDistanceFromTargetToLine(1, 0, -this.node.x, target);\n        }\n        else\n        {\n            return this.SqrDistanceFromTargetToLine(Math.tan(Math.PI / 180 * (90 + this.node.angle)), -1,\n                -Math.tan(Math.PI / 180 * (90 + this.node.angle)) * this.node.x + this.node.y, target);\n        }\n    }\n    /**\n     * Bình phương khoảng cách từ target đến trục ngang block\n     */\n    private SqrDistanceFromTargetToHorizontalLine(target: cc.Node): number\n    {\n        if (this.node.angle === 90 || this.node.angle === 270)\n        {\n            return this.SqrDistanceFromTargetToLine(1, 0, -(this.CenterNode.x + this.node.x), target);\n        }\n        else\n        {\n            return this.SqrDistanceFromTargetToLine(Math.tan(Math.PI / 180 * (this.node.angle)), -1,\n                -Math.tan(Math.PI / 180 * (this.node.angle)) * (this.CenterNode.x + this.node.x) + this.node.y + this.CenterNode.y, target);\n        }\n    }\n    //#endregion CHECK COLLSION\n}\n\nexport enum BlockMoveType\n{\n    Static = 0,\n    Rotate = 1,\n    MoveHorizontal = 2,\n    MoveFollowEdge = 3,\n}"]}